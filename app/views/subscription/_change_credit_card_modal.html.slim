script src="https://js.stripe.com/v3/"

.modal-dialog style="max-width: 500px"
  .modal-content
    .modal-header
      h3.modal-title= (has_default_source?(@stripe_customer) ? translate('profile.change_credit_card') : translate('profile.add_credit_card'))
      button.close type='button' data-dismiss='modal'
        = image_tag("delete.svg", class: 'icon')
    .modal-body
      = form_for User.new, url: change_credit_card_path, method: :post, html: {id: 'payment-form'} do |f|

        div=translate('profile.change_credit_card_description')

        #card-element style='background-color: #FFF; border-radius: 10px; padding: 5px;margin-top: 20px'

        #card-errors

        /- flash.each do |key, value|
          br
          div class="alert alert-#{key}" = value

        .div style='margin-top: 20px'
        div class='buttonbar'
          = link_to translate('general.cancel'), "#", class: 'backbutton float-right', data: {dismiss: 'modal'}
          fieldset.actions
            ol
              li.action.input-action
                input.btn.btn-primary.btn-block type='submit' id='submitbutton' value=(has_default_source?(@stripe_customer) ? translate('profile.change_credit_card') : translate('profile.add_credit_card')) data-disable-with=(has_default_source?(@stripe_customer) ? translate('profile.change_credit_card') : translate('profile.add_credit_card'))

javascript:
    // Copy + paste code from Stripe

    // Create a Stripe client
    var stripe = Stripe("#{Rails.configuration.stripe_public_key}");

    // Create an instance of Elements
    var elements = stripe.elements();

    // Custom styling can be passed to options when creating an Element.
    // (Note that this demo uses a wider set of styles than the guide below.)
    var style = {
        base: {
            color: '#32325d',
            lineHeight: '24px',
            fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
            fontSmoothing: 'antialiased',
            fontSize: '18px',
            '::placeholder': {
                color: '#aab7c4'
            }
        },
        invalid: {
            color: '#fa755a',
            iconColor: '#fa755a'
        }
    };

    // Create an instance of the card Element
    var card = elements.create('card', {style: style, hidePostalCode: true});

    // Add an instance of the card Element into the `card-element` <div>
    card.mount('#card-element');

    // Handle real-time validation errors from the card Element.
    card.addEventListener('change', function (event) {
        var displayError = document.getElementById('card-errors');
        if (event.error) {
            displayError.textContent = event.error.message;
        } else {
            displayError.textContent = '';
        }
    });

    // Handle form submission
    var form = document.getElementById('payment-form');
    form.addEventListener('submit', function (event) {
        event.preventDefault();

        stripe.createToken(card).then(function (result) {
            if (result.error) {
                // Inform the user if there was an error
                var errorElement = document.getElementById('card-errors');
                errorElement.textContent = result.error.message;

                // House of Code custom
                $('#submitbutton').prop("disabled", false);
            } else {
                // Send the token to your server
                stripeTokenHandler(result.token);
            }
        });
    });

    function stripeTokenHandler(token) {
        // Insert the token ID into the form so it gets submitted to the server
        var form = document.getElementById('payment-form');
        var hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        hiddenInput.setAttribute('name', 'stripeToken');
        hiddenInput.setAttribute('value', token.id);
        form.appendChild(hiddenInput);

        // Submit the form
        form.submit();
    }